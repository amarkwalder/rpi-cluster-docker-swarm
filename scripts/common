#!/bin/bash

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

COMMON_BASE_DIR=$( cd "$( echo "${BASH_SOURCE[0]%/*}" )" && pwd )

function rpi::cluster::docker-swarm::common::check-root(){
  if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 1>&2
    exit 1
  fi
}

function rpi::cluster::docker-swarm::common::install(){
  rpi::cluster::docker-swarm::common::log-step "Update System"
  apt-get update -y >> ${COMMON_BASE_DIR}/../console.log 2>&1
  rpi::cluster::docker-swarm::common::log-status-step $?

  rpi::cluster::docker-swarm::common::log-step "General Utilities"
  apt-get install vim make gcc ntp -y >> ${COMMON_BASE_DIR}/../console.log 2>&1
  rpi::cluster::docker-swarm::common::log-status $?
  apt-get autoremove >> ${COMMON_BASE_DIR}/../console.log 2>&1
  rpi::cluster::docker-swarm::common::log-status-step $?

  rpi::cluster::docker-swarm::common::log-step "Reconfigure Timezone"
  timedatectl set-timezone Europe/Zurich >> ${COMMON_BASE_DIR}/../console.log 2>&1
  rpi::cluster::docker-swarm::common::log-status-step $?

  rpi::cluster::docker-swarm::common::log-step "Set Boot Options"
  if [[ -z $(grep "cgroup_enable=cpuset" /boot/cmdline.txt) ]]; then
    sed -e "s@cgroup_enable=memory@cgroup_enable=memory cgroup_enable=cpuset@" -i /boot/cmdline.txt >> ${COMMON_BASE_DIR}/../console.log 2>&1
  fi
  rpi::cluster::docker-swarm::common::log-status-step $?
}

function rpi::cluster::docker-swarm::common::uninstall(){
  rpi::cluster::docker-swarm::common::log-step "General Utilities"
  apt-get uninstall vim make gcc ntp -y >> ${COMMON_BASE_DIR}/../console.log 2>&1
  rpi::cluster::docker-swarm::common::log-status-step $?

  # Timezone and Boot Options will not be rolled back
}

function rpi::cluster::docker-swarm::common::log-header(){
  echo "" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "-" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "- $@" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "- Date: " `date` >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "-------------------------------------------------------------------------------" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  printf "\n%s\n" "$@" 
}

function rpi::cluster::docker-swarm::common::log-step(){
  echo "" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "- INFO: $@" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  printf "%s %-50s" "-" "$@" 
  rpi::cluster::docker-swarm::common::err-reset
}

function rpi::cluster::docker-swarm::common::log-step-warn(){
  echo "" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "- WARN: $@" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  printf "%s ${YELLOW}%s${NC}" "-" "$@" 
  rpi::cluster::docker-swarm::common::err-reset
}

function rpi::cluster::docker-swarm::common::log-step-err(){
  echo "" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "- ERROR: $@" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  printf "%s ${RED}%s${NC}" "-" "$@" 
  rpi::cluster::docker-swarm::common::err-reset
}

function rpi::cluster::docker-swarm::common::log-status-step(){
  rpi::cluster::docker-swarm::common::log-status $1 STEP 
}

function rpi::cluster::docker-swarm::common::log-status(){
  echo "--> STATUS: $1" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  rpi::cluster::docker-swarm::common::err-count $1
  [[ $# == 1 ]] && return $1
  [[ $( rpi::cluster::docker-swarm::common::err-get ) > 0 ]] && printf "[${RED}%s${NC}]\n" "FAILED" || printf "[${GREEN}%s${NC}]\n" "OK"
}

function rpi::cluster::docker-swarm::common::err-get(){
  echo ${ERR}
}

function rpi::cluster::docker-swarm::common::err-reset(){
  ERR=0
}

function rpi::cluster::docker-swarm::common::err-count(){
  ERR=$(( ${ERR} + $1 ))
  return $1
}

function rpi::cluster::docker-swarm::common::log-footer(){
  echo "" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "-" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "- DONE" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "- Date: " `date` >> ${COMMON_BASE_DIR}/../console.log 2>&1
  echo "-------------------------------------------------------------------------------" >> ${COMMON_BASE_DIR}/../console.log 2>&1
  printf "\n"
}

